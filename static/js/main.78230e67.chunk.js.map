{"version":3,"sources":["dataset.csv","MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","setTooltipContent","series","year","useState","data","setData","useEffect","csv","dataset","then","data-tip","projectionConfig","rotate","scale","style","maxHeight","geography","geographies","map","geo","cur","find","s","Country_Name","properties","NAME","Series_Name","colorScale","scaleQuantile","domain","filter","d","range","onMouseEnter","onMouseLeave","stroke","strokeWidth","fill","default","outline","hover","pressed","rsmKey","App","content","setContent","setSeries","setYear","className","value","onChange","e","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAAe,MAA0B,oC,OCmG1BA,EApFE,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,kBAAmBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EAChCC,mBAAS,IADuB,mBACjDC,EADiD,KAC3CC,EAD2C,KASxD,OANAC,qBAAU,WAERC,YAAIC,GAASC,MAAK,SAAAD,GAChBH,EAAQG,QAET,IAED,mCACE,cAAC,gBAAD,CAAeE,WAAS,GACxBC,iBAAkB,CAChBC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,KAETC,MAAO,CACLC,UAAW,OANb,SASE,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UAvBrB,yGAuBQ,SACG,qBAAGC,YACUC,KAAI,SAAAC,GACd,IAAMC,EAAMhB,EAAKiB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,eAAiBJ,EAAIK,WAAWC,MAC7DH,EAAEI,cAAgBzB,KACZ0B,EAAaC,cAChBC,OAAOzB,EAAK0B,QAAO,SAAAC,GAAC,OAAIA,EAAEL,cAAgBzB,KAAQiB,KAAI,SAAAa,GAAC,OAAIA,EAAE7B,OAC7D8B,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJ,OACE,cAAC,YAAD,CAEEhB,UAAWG,EACXc,aAAc,WACRb,GACFpB,EAAkBmB,EAAIK,WAAWC,KAAK,KAAKL,EAAIlB,IAC1CkB,EAAIlB,IACPF,EAAkBmB,EAAIK,WAAWC,KAAK,cAIxCzB,EAAkBmB,EAAIK,WAAWC,KAAK,cAG1CS,aAAc,WACZlC,EAAkB,KAEpBmC,OAAO,OACPC,YAAY,MACZC,KAAMjB,GAAOA,EAAIlB,GAAQyB,EAAWP,EAAIlB,IAAS,OACjDY,MAAO,CACLwB,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLH,KAAM,UACNE,QAAS,QAEXE,QAAS,CACPJ,KAAM,OACNE,QAAS,UA7BRpB,EAAIuB,qBCbdC,MAnCf,WAAgB,IAAD,EACiBxC,mBAAS,IAD1B,mBACNyC,EADM,KACGC,EADH,OAEe1C,mBAAS,0CAFxB,mBAENF,EAFM,KAEE6C,EAFF,OAGW3C,mBAAS,QAHpB,mBAGND,EAHM,KAGA6C,EAHA,KAIb,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,UACE,+DACA,sBAAKA,UAAU,OAAf,UACE,iDACA,yBAAQC,MAAOhD,EAAQiD,SAAU,SAAAC,GAAC,OAAIL,EAAUK,EAAEC,OAAOH,QAAzD,UACE,4EACA,wDACA,2FACA,0GACA,6EACA,kFACA,iGACA,oFAIJ,sBAAKD,UAAU,OAAf,UACE,iDACA,uBAAOK,KAAK,SAASJ,MAAO/C,EAAMgD,SAAU,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOH,gBAGtE,sBAAKD,UAAU,MAAf,UACE,cAAC,EAAD,CAAU/C,OAAQA,EAAQC,KAAMA,EAAMF,kBAAmB6C,IACzD,cAAC,IAAD,UAAeD,WCzBRU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78230e67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dataset.5f9febec.csv\";","import React, { useEffect, useState, memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport { scaleQuantile } from \"d3-scale\";\nimport { csv } from \"d3-fetch\";\nimport { max } from \"d3-array\";\nimport dataset from \"./dataset.csv\"\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent, series, year }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // https://www.bls.gov/lau/\n    csv(dataset).then(dataset => {\n      setData(dataset);\n    });\n  }, []);\n  return (\n    <>\n      <ComposableMap data-tip=\"\"\n      projectionConfig={{\n        rotate: [-40, 0, 0],\n        scale: 180\n      }}\n      style={{\n        maxHeight: \"600\"\n      }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const cur = data.find(s => s.Country_Name === geo.properties.NAME &&\n                s.Series_Name === series)\n                const colorScale = scaleQuantile()\n                  .domain(data.filter(d => d.Series_Name === series).map(d => d[year]))\n                  .range([\n                    \"#ffedea\",\n                    \"#ffcec5\",\n                    \"#ffad9f\",\n                    \"#ff8a75\",\n                    \"#ff5533\",\n                    \"#e2492d\",\n                    \"#be3d26\",\n                    \"#9a311f\",\n                    \"#782618\"\n                  ]);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      if (cur) {\n                        setTooltipContent(geo.properties.NAME+\": \"+cur[year]);\n                        if (!cur[year]) {\n                          setTooltipContent(geo.properties.NAME+\": No data\");\n                        }\n                      }\n                      else {\n                        setTooltipContent(geo.properties.NAME+\": No data\");\n                      }\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    stroke='#aaa'\n                    strokeWidth='0.5'\n                    fill={cur && cur[year] ? colorScale(cur[year]) : \"#EEE\"}\n                    style={{\n                      default: {\n                        outline: 'none'\n                      },\n                      hover: {\n                        fill: \"#0079d3\",\n                        outline: 'none'\n                      },\n                      pressed: {\n                        fill: \"#E42\",\n                        outline: 'none'\n                      }\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default MapChart;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  const [series, setSeries] = useState(\"CO2 emissions (metric tons per capita)\");\n  const [year, setYear] = useState(\"2011\")\n  return (\n    <div className=\"base\">\n      <div className=\"container\">\n        <h2>Environmental Awareness Model</h2>\n        <div className=\"form\">\n          <label>Select data:</label>\n          <select value={series} onChange={e => setSeries(e.target.value)}>\n            <option>CO2 emissions (metric tons per capita)</option>\n            <option>CO2 emissions (kt)</option>\n            <option>Total greenhouse gas emissions (kt of CO2 equivalent)</option>\n            <option>Terrestrial and marine protected areas (% of total territorial area)</option>\n            <option>Access to electricity (% of population)</option>\n            <option>Energy use (kg of oil equivalent per capita)</option>\n            <option>GDP per unit of energy use (PPP $ per kg of oil equivalent)</option>\n            <option>Total natural resources rents (% of GDP)</option>\n\n          </select>\n        </div>\n        <div className=\"form\">\n          <label>Select year:</label>\n          <input type=\"number\" value={year} onChange={e => setYear(e.target.value)} />\n        </div>\n      </div>\n      <div className=\"map\">\n        <MapChart series={series} year={year} setTooltipContent={setContent} />\n        <ReactTooltip>{content}</ReactTooltip>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}