{"version":3,"sources":["MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","setTooltipContent","selected","setSelected","data-tip","projectionConfig","rotate","scale","style","maxHeight","geography","geographies","map","geo","onMouseEnter","properties","NAME","POP_EST","onMouseLeave","onClick","stroke","strokeWidth","fill","default","outline","hover","pressed","rsmKey","memo","App","useState","content","setContent","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAWMA,EAAW,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,kBAAmBC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC/C,OACE,mCACE,cAAC,gBAAD,CAAeC,WAAS,GACxBC,iBAAkB,CAChBC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,KAETC,MAAO,CACLC,UAAW,OANb,SASE,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UAfrB,yGAeQ,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,cAAC,YAAD,CAEEH,UAAWG,EACXC,aAAc,WAAO,IAAD,EACQD,EAAIE,WAAtBC,EADU,EACVA,KADU,EACJC,QACdhB,EAAkB,GAAD,OAAIe,KAEvBE,aAAc,WACZjB,EAAkB,KAEpBkB,QAAS,WACPhB,EAAYU,EAAIE,WAAWC,OAE7BI,OAAO,OACPC,YAAY,MACZC,KAAQT,EAAIE,WAAWC,OAASd,EAAW,OAAS,UACpDM,MAAO,CACLe,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLH,KAAM,OACNE,QAAS,QAEXE,QAAS,CACPJ,KAAM,OACNE,QAAS,UAzBRX,EAAIc,qBAsCZC,iBAAK5B,GCrCL6B,MArBf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,mBAAS,mBAF5B,mBAEN5B,EAFM,KAEIC,EAFJ,KAGb,OACE,gCACE,sBAAK8B,UAAU,OAAf,UACE,2CACc,oBAAb/B,EACC,wBAAQiB,QAAS,kBAAMhB,EAAY,oBAAnC,6BAEA,6BAAKD,OAGT,sBAAK+B,UAAU,MAAf,UACE,cAAC,EAAD,CAAU/B,SAAUA,EAAUC,YAAaA,EAAaF,kBAAmB+B,IAC3E,cAAC,IAAD,UAAeD,WCXRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6bb0d5dc.chunk.js","sourcesContent":["import React, { useState, memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst MapChart = ({ setTooltipContent, selected, setSelected }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\"\r\n      projectionConfig={{\r\n        rotate: [-15, 0, 0],\r\n        scale: 180\r\n      }}\r\n      style={{\r\n        maxHeight: \"450\"\r\n      }}\r\n      >\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, POP_EST } = geo.properties;\r\n                    setTooltipContent(`${NAME}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  onClick={() => {\r\n                    setSelected(geo.properties.NAME)\r\n                  }}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  fill = {geo.properties.NAME === selected ? \"#e42\" : \"#D6D6DA\"}\r\n                  style={{\r\n                    default: {\r\n                      outline: 'none'\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: 'none'\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: 'none'\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  const [selected, setSelected] = useState(\"Click a country\");\n  return (\n    <div>\n      <div className=\"base\">\n        <h1>Framework</h1>\n        {selected !== \"Click a country\" ? (\n          <button onClick={() => setSelected(\"Click a country\")}>Clear selection</button>\n        ) : (\n          <h4>{selected}</h4>\n        )}\n      </div>\n      <div className=\"map\">\n        <MapChart selected={selected} setSelected={setSelected} setTooltipContent={setContent} />\n        <ReactTooltip>{content}</ReactTooltip>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}